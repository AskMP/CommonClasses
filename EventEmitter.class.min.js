const _e=Symbol("events"),_r=Symbol("ready");export class EventEmitter{constructor(){}on(e,t,s=!1){if("function"!=typeof t)throw new Error(`Invalid Listener: ${e}. Must be a function`);"ready"===e&&this[_r]?t():(this[_e]||(this[_e]={}),this[_e][e]||(this[_e][e]=[]),this[_e][e].push({listener:t,once:!!s}))}once(e,t){this.on(e,t,!0),"ready"===e&&this[_r]&&t()}off(e,t){this[_e]&&this[_e][e]&&(this[_e][e]=this[_e][e].filter(e=>e.listener!==t))}offAll(e){this[_e][e]=[]}emit(e,t){return new Promise((s,n)=>{this[_e]&&this[_e][e]&&(this[_e][e].forEach((s,n)=>{s.listener(t),s.once&&this.off(e,s.listener)}),s())})}addEventListener(e,t){return this.on(e,t)}addListener(e,t){return this.on(e,t)}removeEventListener(e,t){return this.off(e,t)}removeListener(e,t){return this.off(e,t)}removeAllListeners(e){return this.offAll(e)}ready(){return this[_r]=!0,this.emit("ready")}}export{EventEmitter as default};